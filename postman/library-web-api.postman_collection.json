{
	"info": {
		"_postman_id": "26a24a3e-e680-4b03-ad14-0396110635fc",
		"name": "library-web-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38259319"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "auth/authenticate - Authenticate user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var token = pm.response.text();",
									"pm.collectionVariables.set('auth_token', token);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auth_url}}/auth/authenticate",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"auth",
								"authenticate"
							]
						}
					},
					"response": []
				},
				{
					"name": "users/{username} - Get user by username",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auth_url}}/users/admin",
							"host": [
								"{{auth_url}}"
							],
							"path": [
								"users",
								"admin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "books",
			"item": [
				{
					"name": "books - Create book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 200 при успешном создании\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"book_id\", pm.response.json().id);\r",
									"pm.collectionVariables.set(\"book_isbn\", pm.response.json().isbn);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn\": \"978-3-16-194010-0\",\r\n    \"title\": \"Example Book Title2\",\r\n    \"genre\": \"FICTION\",\r\n    \"description\": \"An interesting book on various topics.\",\r\n    \"author\": {\r\n        \"name\": \"Lyesha\",\r\n        \"surname\": \"Korotkevich\",\r\n        \"birthDate\": \"2024-10-28\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "books - Create book with invalid title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 400 для невалидного названия\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isbn\": \"978-3-16-148410-0\",\r\n    \"title\": \"\",\r\n    \"genre\": \"FICTION\",\r\n    \"description\": \"An interesting book on various topics.\",\r\n    \"author\": {\r\n        \"name\": \"Vladimir\",\r\n        \"surname\": \"Korotkevich\",\r\n        \"birthDate\": \"2024-10-28\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "books - Get all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "books/{book_id} - Get book by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ответ содержит книгу с заданным ID\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedBookId = pm.collectionVariables.get(\"book_id\");",
									"    pm.expect(jsonData).to.have.property('id', expectedBookId);  ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{book_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{book_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "books/{invalid_id} - Get book by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/{{invalid_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{invalid_id}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "books/isbn/{book_isbn} - Get book by valid isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Ответ содержит книгу с заданным isbn\", function () {",
									"    var jsonData = pm.response.json();",
									"    var expectedBookIsbn = pm.collectionVariables.get(\"book_isbn\");",
									"    pm.expect(jsonData).to.have.property('isbn', expectedBookIsbn);  ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/isbn/{{book_isbn}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"isbn",
								"{{book_isbn}}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "books/isbn/1- Get book by invalid isbn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/books/isbn/1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"isbn",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "books/{book_id} - Update book by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isbn\": \"978-3-16-148410-0\",\n    \"title\": \"Example Book Title\",\n    \"genre\": \"FICTION\",\n    \"description\": \"An interesting book on various topics. New description\",\n    \"author\": {\n        \"name\": \"Vladimir\",\n        \"surname\": \"Korotkevich\",\n        \"birthDate\": \"2024-10-28\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{book_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{book_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "books/{invalid_id} - Update book by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"isbn\": \"978-3-16-148410-0\",\n    \"title\": \"Example Book Title\",\n    \"genre\": \"FICTION\",\n    \"description\": \"An interesting book on various topics. New description\",\n    \"author\": {\n        \"name\": \"Vladimir\",\n        \"surname\": \"Korotkevich\",\n        \"birthDate\": \"2024-10-28\"\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{invalid_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{invalid_id}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "books/{invalid_id} - Delete book by invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{invalid_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{invalid_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "books/{book_id} - Delete book by valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{book_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{book_id}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "library",
			"item": [
				{
					"name": "library/available-books - Get available books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Статус 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{library_url}}/library/available-books",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"library",
								"available-books"
							]
						}
					},
					"response": []
				},
				{
					"name": "library/{book_id} - Take book in library",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"returnBy\": \"2024-11-10T15:30:00\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{library_url}}/library/24",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"library",
								"24"
							]
						}
					},
					"response": []
				},
				{
					"name": "library/{book_id} - Return book to library",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{library_url}}/library/24",
							"host": [
								"{{library_url}}"
							],
							"path": [
								"library",
								"24"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api",
			"type": "string"
		},
		{
			"key": "library_url",
			"value": "http://localhost:8081/api",
			"type": "string"
		},
		{
			"key": "book_id",
			"value": ""
		},
		{
			"key": "invalid_id",
			"value": "99999",
			"type": "string"
		},
		{
			"key": "book_isbn",
			"value": ""
		},
		{
			"key": "auth_url",
			"value": "http://localhost:8082/api",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImlhdCI6MTczMDY2NTMzNywiZXhwIjoxNzMwNjY4OTM3fQ.mpoq1taMj_oENGzbcnaXQejKf_vz49s_vkSZA9gOyzM"
		}
	]
}